#!/usr/bin/env bash

# Dotfiles and bootstrap installer
# Installs git, clones repository and symlinks dotfiles to your home directory

set -e
trap on_error SIGTERM

e='\033'
RESET="${e}[0m"
BOLD="${e}[1m"
CYAN="${e}[0;96m"
RED="${e}[0;91m"
YELLOW="${e}[0;93m"
GREEN="${e}[0;92m"

PYTHON3_VERSION=3.9.10

_exists() {
  command -v "$1" > /dev/null 2>&1
}

# Success reporter
info() {
  echo -e "${CYAN}${*}${RESET}"
}

# Error reporter
error() {
  echo -e "${RED}${*}${RESET}"
}

# Success reporter
success() {
  echo -e "${GREEN}${*}${RESET}"
}

# End section
finish() {
  success "Done!"
  echo
  sleep 1
}

# Set directory
export DOTFILES=${1:-"$HOME/.dotfiles"}
GITHUB_REPO_URL_BASE="https://github.com/denysdovhan/dotfiles"
HOMEBREW_INSTALLER_URL="https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh"

on_start() {
  info "           __        __   ____ _  __           "
  info "      ____/ /____   / /_ / __/(_)/ /___   _____"
  info "     / __  // __ \ / __// /_ / // // _ \ / ___/"
  info "  _ / /_/ // /_/ // /_ / __// // //  __/(__  ) "
  info " (_)\__,_/ \____/ \__//_/  /_//_/ \___//____/  "
  info "                                               "
  info "              by @denysdovhan                  "
  info "                                               "

  info "This script will guide you through installing git, zsh and dofiles itself."
  echo "It will not install anything without your direct agreement!"
  echo
  read -p "Do you want to proceed with installation? [y/N] " -n 1 answer
  echo
  if [ "${answer}" != "y" ]; then
    exit 1
  fi
}

install_homebrew() {
  info "Trying to detect installed Homebrew..."

  if ! _exists brew; then
    echo "Seems like you don't have Homebrew installed!"
    read -p "Do you agree to proceed with Homebrew installation? [y/N] " -n 1 answer
    echo
    if [ "${answer}" != "y" ]; then
      exit 1
    fi

    info "Installing Homebrew..."
    bash -c "$(curl -fsSL ${HOMEBREW_INSTALLER_URL})"
    eval "$(/opt/homebrew/bin/brew shellenv)"
  else
    success "You already have Homebrew installed. Skipping..."
  fi

  finish
}

install_git() {
  info "Trying to detect installed Git..."

  if ! _exists git; then
    echo "Seems like you don't have Git installed!"
    read -p "Do you agree to proceed with Git installation? [y/N] " -n 1 answer
    echo
    if [ "${answer}" != "y" ]; then
      exit 1
    fi

    info "Installing Git..."

    if [ "$(uname)" != "Darwin" ]; then
      brew install git
    elif [ "$(uname)" != "Linux" ]; then
      sudo apt-get install git
    else
      error "Error: Failed to install Git!"
      exit 1
    fi
  else
    success "You already have Git installed. Skipping..."
  fi

  finish
}

install_zsh() {
  info "Trying to detect installed Zsh..."

  if ! _exists zsh; then
    echo "Seems like you don't have Zsh installed!"
    read -p "Do you agree to proceed with Zsh installation? [y/N] " -n 1 answer
    echo
    if [ "${answer}" != "y" ]; then
      exit 1
    fi

    info "Installing Git..."

    if [ "$(uname)" != "Darwin" ]; then
      brew install zsh zsh-completions
    elif [ "$(uname)" != "Linux" ]; then
      sudo apt-get install zsh
    else
      error "Error: Failed to install Zsh!"
      exit 1
    fi
  else
    success "You already have Zsh installed. Skipping..."
  fi

  if _exists zsh && [[ -z "$ZSH_VERSION" ]]; then
    info "Setting up Zsh as default shell..."

    echo "The script will ask you the password for sudo:"
    echo
    echo "1) When changing your default shell via chsh -s"
    echo

    chsh -s "$(command -v zsh)" || error "Error: Cannot set Zsh as default shell!"
  fi

  finish
}

install_software() {
  if [ "$(uname)" != "Darwin" ]; then
    return
  fi

  info "Installing software..."

  cd "$DOTFILES"

  # Homebrew Bundle
  if _exists brew; then
    brew bundle
  else
    error "Error: Brew is not available"
  fi

  cd -

  finish
}

install_npm() {
  # Do not instal npm on non-macOS machines
  if [ "$(uname)" != "Darwin" ]; then
    return
  fi

  info "Installing global npm packages..."

  packages=(
    commitizen
    npkill
    fkill-cli
    cz-conventional-changelog
  )

  echo "Installing: ${packages[*]}"

  npm install -g "${packages[@]}"

  finish
}

setup_pyenv() {
  cd "$DOTFILES"

  # pyenv init
  export PATH=${HOME}/.pyenv/bin:$PATH
  eval "$(pyenv init -)"

  # install enable-shared python using pyenv
  if [ ! -e "${HOME}"/.pyenv/versions/${PYTHON3_VERSION} ];then
      CONFIGURE_OPTS="--enable-shared" pyenv install ${PYTHON3_VERSION}
  else
      echo "Python ${PYTHON3_VERSION} is already installed."
  fi

  # set python
  pyenv shell --unset
  pyenv global ${PYTHON3_VERSION}

  # check python version
  python3_version=$(python3 --version 2>&1)
  if [ "${python3_version}" = "Python ${PYTHON3_VERSION}" ];then
      echo "Python 3 version check is OK."
  else
      echo "Python 3 version check is failed."
      exit 1
  fi

  # install python libraries
  pip3 install -U pip
  pip3 install -U setuptools
  pip3 install -r requirements.txt

  finish
}

setup_tmux_vim() {
  cd "$DOTFILES"

  ln -s ~/.vim ~/.config/nvim
  ln -s ~/.vimrc ~/.config/nvim/init.vim
  echo "Made symlink of vim related files."

  # install tpm
  if [ ! -e ~/.tmux/plugins/tpm ];then
      echo "Installing tpm..."
      git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
  fi

  # install vim plugins
  echo "installing vim plugins..."
  export PATH=${HOME}/local/bin:$PATH
  [ ! -e ~/.cache/dein/repos/github.com/Shougo/dein.vim ] && \
      git clone https://github.com/Shougo/dein.vim ~/.cache/dein/repos/github.com/Shougo/dein.vim
  nvim -c "try | call dein#install() | finally | qall! | endtry" -N -u "${HOME}"/.vim/init.vim -V1 -es
  nvim -c "try | call dein#update() | finally | qall! | endtry" -N -u "${HOME}"/.vim/init.vim -V1 -es

  # install terminfo
  tic ./terminfo/xterm-256color-italic.terminfo
  
  # To install useful key bindings and fuzzy completion:
  $(brew --prefix)/opt/fzf/install

  finish
}

setup_macos() {
    echo "Configuring macOS"
    if [[ "$(uname)" == "Darwin" ]]; then

        echo "Finder: show all filename extensions"
        defaults write NSGlobalDomain AppleShowAllExtensions -bool true

        echo "show hidden files by default"
        defaults write com.apple.Finder AppleShowAllFiles -bool false

        echo "only use UTF-8 in Terminal.app"
        defaults write com.apple.terminal StringEncodings -array 4

        echo "expand save dialog by default"
        defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true

        echo "show the ~/Library folder in Finder"
        chflags nohidden ~/Library

        echo "Enable full keyboard access for all controls (e.g. enable Tab in modal dialogs)"
        defaults write NSGlobalDomain AppleKeyboardUIMode -int 3

        echo "Enable subpixel font rendering on non-Apple LCDs"
        defaults write NSGlobalDomain AppleFontSmoothing -int 2

        echo "Use current directory as default search scope in Finder"
        defaults write com.apple.finder FXDefaultSearchScope -string "SCcf"

        echo "Show Path bar in Finder"
        defaults write com.apple.finder ShowPathbar -bool true

        echo "Show Status bar in Finder"
        defaults write com.apple.finder ShowStatusBar -bool true

        echo "Enable tap to click (Trackpad)"
        defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true

        echo "Enable Safariâ€™s debug menu"
        defaults write com.apple.Safari IncludeInternalDebugMenu -bool true

        echo "Kill affected applications"

        for app in Safari Finder Dock Mail SystemUIServer; do killall "$app" >/dev/null 2>&1; done
    else
        warning "macOS not detected. Skipping."
    fi
    
    finish
}

on_finish() {
  echo
  success "Setup was successfully done!"
  success "Happy Coding!"
  echo
  echo -ne "$RED"'-_-_-_-_-_-_-_-_-_-_-_-_-_-_'
  echo -e  "$RESET""$BOLD"',------,'"$RESET"
  echo -ne "$YELLOW"'-_-_-_-_-_-_-_-_-_-_-_-_-_-_'
  echo -e  "$RESET""$BOLD"'|   /\_/\\'"$RESET"
  echo -ne "$GREEN"'-_-_-_-_-_-_-_-_-_-_-_-_-_-'
  echo -e  "$RESET""$BOLD"'~|__( ^ .^)'"$RESET"
  echo -ne "$CYAN"'-_-_-_-_-_-_-_-_-_-_-_-_-_-_'
  echo -e  "$RESET""$BOLD"'""  ""'"$RESET"
  echo
  info "P.S: Don't forget to restart a terminal :)"
  echo
}

on_error() {
  echo
  error "Wow... Something serious happened!"
  error "Though, I don't know what really happened :("
  error "In case, you want to help me fix this problem, raise an issue -> ${CYAN}${GITHUB_REPO_URL_BASE}issues/new${RESET}"
  echo
  exit 1
}

main() {
  on_start "$*"
  install_homebrew "$*"
  install_git "$*"
  install_zsh "$*"
  install_software "$*"
  install_npm "$*"
  setup_pyenv "$*"
  setup_tmux_vim "$*"
  setup_macos "$*"
  on_finish "$*"
}

main "$*"
